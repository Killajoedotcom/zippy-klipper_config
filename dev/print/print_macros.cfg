#####################################
#         Start Print Macro         #
#       Version 2.0  2023-1-4       #
#####################################

################################
######### START_PRINT ##########
################################
[gcode_macro START_PRINT]
gcode:
    {% if printer["gcode_macro _printcfg"].auto_filsensor == True %}
        # Turn on Filament Sensor
        ENABLEFILAMENTSENSOR
    {% endif %}
    # Define positioning system
    G90 ; use absolute coordinates
    M83 ; extruder relative mode
    # Preheat bed surface
    HEAT_SURFACE
    # Preheat/soak chamber
    PREP_CHAMBER
    # Prepapre fans
    PREP_FANS
    # Prepare bed suface
    PREP_SURFACE
    # Preheat hotend
    PREP_EXTRUDER
    # Status notifications
    {% if printer["gcode_macro _printcfg"].audio_status == True %}
        {printer["gcode_macro _printcfg"].start_audio} ; audio feedback
    {% endif %}
    M{printer["gcode_macro _printcfg"].output} Print Started ; status feedfback
    {% if printer["gcode_macro _printcfg"].led_status == True %}
        STATUS_PRINTING ; LED feedback
    {% endif %}

################################
######### HEAT_SURFACE #########
################################
[gcode_macro HEAT_SURFACE]
gcode:
    # Preheat bed
    {% if printer["gcode_macro _printcfg"].bed_temp > 0 %}
        {% if printer["gcode_macro _printcfg"].led_status == True %}
            {printer["gcode_macro _printcfg"].status_heat} ; LED feedback
        {% endif %}
        {% if printer["gcode_macro _printcfg"].extruder_pretemp > 0 %}
            M{printer["gcode_macro _printcfg"].output} Warming extruder ; status feedfback
            SET_HEATER_TEMPERATURE HEATER=extruder TARGET={printer["gcode_macro _printcfg"].extruder_pretemp} ; allow partial nozzle warmup
        {% endif %}
        M{printer["gcode_macro _printcfg"].output} Preheating bed ; status feedfback
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={printer["gcode_macro _printcfg"].bed_temp}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={printer["gcode_macro _printcfg"].bed_temp-1} MAXIMUM={printer["gcode_macro _printcfg"].bed_temp+5}
    {% endif %}

################################
######### PREP_CHAMBER #########
################################
[gcode_macro PREP_CHAMBER]
gcode:
    {% if printer["gcode_macro _printcfg"].chamber_temp != 0 %}
        M{printer["gcode_macro _printcfg"].output} Preheating chamber ; status feedfback
        {% if printer["gcode_macro _printcfg"].led_status == True %}
            {printer["gcode_macro _printcfg"].status_heat} ; LED feedback
        {% endif %}
        {% if printer["gcode_macro _printcfg"].chamber_type == 'temperature_fan' %}
            SET_TEMPERATURE_FAN_TARGET temperature_fan={printer["gcode_macro _printcfg"].chamber_name} target={printer["gcode_macro _printcfg"].chamber_temp}
        {% elif printer["gcode_macro _printcfg"].chamber_type == 'heater_generic' %}
            SET_HEATER_TEMPERATURE HEATER={printer["gcode_macro _printcfg"].chamber_name} TARGET={printer["gcode_macro _printcfg"].chamber_temp}
        {% endif %}
        {% if printer["gcode_macro _printcfg"].heat_soak == True %}
            {% if printer["gcode_macro _printcfg"].time_soak == True %}
                M{printer["gcode_macro _printcfg"].output} Soaking {printer["gcode_macro _printcfg"].chamber_time}mins ; status feedfback
                G4 S{printer["gcode_macro _printcfg"].chamber_time*60}
            {% endif %}
            {% if printer["gcode_macro _printcfg"].temp_soak == True %}
                M{printer["gcode_macro _printcfg"].output} Soaking until {printer["gcode_macro _printcfg"].chamber_time}Â° ; status feedfback
                TEMPERATURE_WAIT SENSOR={printer["gcode_macro _printcfg"].chamber_name} MINIMUM={printer["gcode_macro _printcfg"].chamber_temp} MAXIMUM={printer["gcode_macro _printcfg"].chamber_temp+25}
            {% endif %}
        {% endif %}
    {% endif %}

################################
########## PREP_FANS ###########
################################
[gcode_macro PREP_FANS]
gcode:
    {% if printer["gcode_macro _printcfg"].nevermore_speed > 0 %}
        SET_FAN_SPEED FAN={printer["gcode_macro _printcfg"].nevermore_name} SPEED={printer["gcode_macro _printcfg"].nevermore_speed}
    {% endif %}
    {% if printer["gcode_macro _printcfg"].controller_fan == True %}
        {printer["gcode_macro _printcfg"].controller_fan_start}
    {% endif %}

################################
######### PREP_SURFACE #########
################################
[gcode_macro PREP_SURFACE]
gcode:
    # Homing/undock probe
    {% if printer["gcode_macro _printcfg"].docking_probe == True %}
        # Get probe
        M{printer["gcode_macro _printcfg"].output} Collecting probe ; status feedfback
        {% if printer["gcode_macro _printcfg"].led_status == True %}
            STATUS_HOMING ; LED feedback
        {% endif %}
        {% if printer.toolhead.homed_axes != "xyz" %}
            M{printer["gcode_macro _printcfg"].output} Homing XY ; status feedfback
            G28 Y X ; home XY axis
        {% endif %}
        {printer["gcode_macro _printcfg"].attach_macro} ; attach probe
        M{printer["gcode_macro _printcfg"].output} Homing Z ; status feedfback
        G28 Z ; home Z axis
    {% else %}
        HOME_IF_NEEDED
    {% endif %}
    # Z-tilt or QGL
    {% if printer["gcode_macro _printcfg"].z_tilt == True %}
        M{printer["gcode_macro _printcfg"].output} Calibrate Z ; status feedfback
        {% if printer["gcode_macro _printcfg"].led_status == True %}
            STATUS_CALIBRATING_Z ; LED feedback
        {% endif %}
        Z_TILT_ADJUST ; adjust z-tilt
    {% elif printer["gcode_macro _printcfg"].qgl == True %}
        M{printer["gcode_macro _printcfg"].output} Calibrate Z ; status feedfback
        {% if printer["gcode_macro _printcfg"].led_status == True %}
            STATUS_CALIBRATING_Z ; LED feedback
        {% endif %}
        QUAD_GANTRY_LEVEL  ; adjust QGL
    {% endif %}
    # Bed mesh
    {% if printer["gcode_macro _printcfg"].z_tilt == True %}
        M{printer["gcode_macro _printcfg"].output} Mesh print area ; status feedfback
        BED_MESH_CALIBRATE
    {% endif %}
    # Dock probe
    {% if printer["gcode_macro _printcfg"].docking_probe == True %}
        M{printer["gcode_macro _printcfg"].output} Docking probe ; status feedfback
        {printer["gcode_macro _printcfg"].dock_macro} ; dock probe
    {% endif %}

################################
######## PREP_EXTRUDER #########
################################
[gcode_macro PREP_EXTRUDER]
gcode:
    M{printer["gcode_macro _printcfg"].output} Preheating tool ; status feedfback
    {% if printer["gcode_macro _printcfg"].led_status == True %}
        {printer["gcode_macro _printcfg"].status_heat} ; LED feedback
    {% endif %}
    M104 S{printer["gcode_macro _printcfg"].extruder_temp} ; set final nozzle temp
    # Park for preheating
    {% if printer["gcode_macro _printcfg"].cleaning == True %}
        G1 Z{25 + printer["gcode_macro CLEAN_NOZZLE"].start_z} F240
        G1 X{printer["gcode_macro CLEAN_NOZZLE"].start_x} Y{printer["gcode_macro CLEAN_NOZZLE"].start_y} F3000 ; move to park position
    {% else %}
        G1 Z{printer["gcode_macro _printcfg"].preheat_z} F240
        G1 X{printer["gcode_macro _printcfg"].preheat_x} Y{printer["gcode_macro _printcfg"].preheat_y} F3000 ; move to park position
    {% endif %}
    # Wait for heating to complete
    M109 S{printer["gcode_macro _printcfg"].extruder_temp} ; wait for nozzle temp to stabilize
    # Nozzle Cleaning
    {% if printer["gcode_macro _printcfg"].cleaning == True %}
        {% if printer["gcode_macro _printcfg"].led_status == True %}
            STATUS_CLEANING ; LED feedback
        {% endif %}
        {% if printer["gcode_macro _printcfg"].audio_status == True %}
            {printer["gcode_macro _printcfg"].clean_macro} ; audio feedback
        {% endif %}
    {% endif %}
    # Nozzle Purging
    {% if printer["gcode_macro _printcfg"].purging == True %}
        {% if printer["gcode_macro _printcfg"].led_status == True %}
            STATUS_CLEANING ; LED feedback
        {% endif %}
        {% if printer["gcode_macro _printcfg"].audio_status == True %}
            {printer["gcode_macro _printcfg"].purge_macro} ; purge nozzle
        {% endif %}
    {% endif %}

################################
########## END_PRINT ###########
################################
[gcode_macro END_PRINT]
description: Present the finished print
gcode:
    {% if printer["gcode_macro _printcfg"].end_print == True %}
        {% if printer["gcode_macro _printcfg"].led_status == True %}
            STATUS_PART_READY ; LED feedback
        {% endif %}
        STOP_COMPONENTS
        # Acknowledge success!
        M{printer["gcode_macro _printcfg"].output} Print Complete ; status feedfback
        {% if printer["gcode_macro _printcfg"].audio_status == True %}
            {printer["gcode_macro _printcfg"].success_audio} ; audio feedback
        {% endif %}
        {% if printer["gcode_macro _printcfg"].led_status == True %}
            STATUS_READY ; LED feedback
        {% endif %}
        {% if printer["gcode_macro _printcfg"].unload_filament == True %}
            {printer["gcode_macro _printcfg"].m600} ; unload filament
        {% endif %}
        {% if printer["gcode_macro _printcfg"].power_off == True %}
            {printer["gcode_macro _printcfg"].off_macro} ; power off printer
        {% endif %}
    {% endif %}

################################
###### STOP_COMPONENTS #########
################################
[gcode_macro STOP_COMPONENTS]
gcode:
    {% if printer["gcode_macro _printcfg"].auto_filsensor == True %}
        # Disable filament sensor
        DISABLEFILAMENTSENSOR
    {% endif %}
    {% if printer["gcode_macro _printcfg"].controller_fan == True %}
        {printer["gcode_macro _printcfg"].controller_fan_stop}
    {% endif %}
    {% if printer["gcode_macro _printcfg"].use_scrubber == True %}
        # Scrub VOCs
        SCRUBBER
    {% endif %}

################################
######## CANCEL_PRINT ##########
################################
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
    M{printer["gcode_macro _printcfg"].output} Print Canceled ; status feedfback
    {% if printer["gcode_macro _printcfg"].led_status == True %}
        STATUS_ERROR ; LED feedback
    {% endif %}
    ## Move head and retract only if not already in the pause state and park set to true
    {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
        _TOOLHEAD_PARK_PAUSE_CANCEL
    {% endif %}
    {% if printer["gcode_macro _printcfg"].audio_status == True %}
        {printer["gcode_macro _printcfg"].error_audio} ; audio feedback
    {% endif %}
    STOP_COMPONENTS
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE

################################
########### PAUSE ##############
################################
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    M{printer["gcode_macro _printcfg"].output} Print Paused ; status feedfback
    {% if printer["gcode_macro _printcfg"].led_status == True %}
        STATUS_BUSY ; LED feedback
    {% endif %}
    SET_IDLER TIME=18000 POWER=1 EXTRUDER=0 BED=1 CHAMBER=1 STEPPERS=1
    PAUSE_BASE
    _TOOLHEAD_PARK_PAUSE_CANCEL

################################
########### RESUME #############
################################
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
    {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
        {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
        {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
        #SET_IDLE_TIMEOUT TIMEOUT=600
        M83
        G1 E{extrude} F2100
        {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
    {% else %}
        {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    M{printer["gcode_macro _printcfg"].output} Print Resumed ; status feedfback
    {% if printer["gcode_macro _printcfg"].led_status == True %}
        STATUS_PRINTING ; LED feedback
    {% endif %}
    {% if printer["gcode_macro _printcfg"].audio_status == True %}
        {printer["gcode_macro _printcfg"].resume_audio} ; audio feedback
    {% endif %}
    SET_IDLER TIME=900 POWER=0
    RESUME_BASE {get_params}



################################
###### BED_MESH_CALIBRATE ######
################################
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE

gcode:
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
    {% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
    {% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (printer.configfile.settings.bed_mesh.probe_count[0]-2)  %}
    {% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (printer.configfile.settings.bed_mesh.probe_count[1]-2)  %}
    {% set x_min = bed_mesh_min[0] %}
    {% set y_min = bed_mesh_min[1] %}
    {% set x_max = bed_mesh_max[0] %}
    {% set y_max = bed_mesh_max[1] %}
    
    { action_respond_info("{} points, clamping to mesh [{!r} {!r}]".format(
        all_points | count,
        bed_mesh_min,
        bed_mesh_max,
    )) }

    {% if printer["gcode_macro _printcfg"].mesh_fuzz_enable == True %}
        {% if all_points %}
            {% set fuzz_range = range(printer["gcode_macro _printcfg"].mesh_fuzz_min * 100 | int, printer["gcode_macro _printcfg"].mesh_fuzz_max * 100 | int) %}
            {% set x_min = ( bed_mesh_min[0], ((all_points | map(attribute=0) | min - (fuzz_range | random / 100.0)) | default(bed_mesh_min[0])) ) | max %}
            {% set y_min = ( bed_mesh_min[1], ((all_points | map(attribute=1) | min - (fuzz_range | random / 100.0)) | default(bed_mesh_min[1])) ) | max %}
            {% set x_max = ( bed_mesh_max[0], ((all_points | map(attribute=0) | max + (fuzz_range | random / 100.0)) | default(bed_mesh_max[0])) ) | min %}
            {% set y_max = ( bed_mesh_max[1], ((all_points | map(attribute=1) | max + (fuzz_range | random / 100.0)) | default(bed_mesh_max[1])) ) | min %}
        {% endif %}
    {% else %}
        {% set x_min = [ bed_mesh_min[0], (all_points | map(attribute=0) | min | default(bed_mesh_min[0])) ] | max %}
        {% set y_min = [ bed_mesh_min[1], (all_points | map(attribute=1) | min | default(bed_mesh_min[1])) ] | max %}
        {% set x_max = [ bed_mesh_max[0], (all_points | map(attribute=0) | max | default(bed_mesh_max[0])) ] | min %}
        {% set y_max = [ bed_mesh_max[1], (all_points | map(attribute=1) | max | default(bed_mesh_max[1])) ] | min %}
    {% endif %}

    { action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(
        (x_min, y_min), 
        (x_max, y_max),
    )) }
    
    {% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | int) + 2 %}
    {% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | int) + 2 %}
    
    {% if (([points_x, points_y]|max) > 6) %}
        {% set algorithm = "bicubic" %}
        {% set min_points = 4 %}
    {% else %}
        {% set algorithm = "lagrange" %}
        {% set min_points = 3 %}
    {% endif %}
    { action_respond_info( "Algorithm: {}".format(algorithm)) }
    
    {% set points_x = [points_x, min_points]|max  %}
    {% set points_y = [points_y, min_points]|max  %}
    { action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }

    {% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}
        {% set ref_index = (points_x * points_y / 2) | int %}
        { action_respond_info( "Reference index: {}".format(ref_index) ) }  
    {% else %}
        {% set ref_index = -1 %}
    {% endif %}

    {% if printer["gcode_macro _printcfg"].docking_probe == True %}
        {printer["gcode_macro _printcfg"].attach_macro}              # Attach/deploy a probe if the probe is stored somewhere outside of the print area
    {% endif %}

    {% if printer["gcode_macro _printcfg"].led_status == True %}
        {printer["gcode_macro _printcfg"].status_mesh} ; LED feedback
    {% endif %}

    _BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}

    {% if printer["gcode_macro _printcfg"].docking_probe == True %}
        {printer["gcode_macro _printcfg"].dock_macro}              # Detach/stow a probe if the probe is stored somewhere outside of the print area
    {% endif %}

################################
######## ADAPTIVE_PURGE ########
################################
[gcode_macro ADAPTIVE_PURGE]
description: A purge macro that adapts to be near your actual printed objects
gcode:
    {% if printer["gcode_macro _printcfg"].purge_adaptive == True %}
        {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
        {% set x_origin = (all_points | map(attribute=0) | min | default(printer["gcode_macro _printcfg"].purge_x + printer["gcode_macro _printcfg"].purge_dist_x + printer["gcode_macro _printcfg"].purge_size)) - printer["gcode_macro _printcfg"].purge_dist_x - printer["gcode_macro _printcfg"].purge_size %}
        {% set y_origin = (all_points | map(attribute=1) | min | default(printer["gcode_macro _printcfg"].purge_y + printer["gcode_macro _printcfg"].purge_dist_y + printer["gcode_macro _printcfg"].purge_size)) - printer["gcode_macro _printcfg"].purge_dist_y - printer["gcode_macro _printcfg"].purge_size %}
        {% set x_origin = ([x_origin, 0] | max) %}
        {% set y_origin = ([y_origin, 0] | max) %}
    {% else %}
        {% set x_origin = printer["gcode_macro _printcfg"].purge_x | float %}
        {% set y_origin = printer["gcode_macro _printcfg"].purge_y | float %}
    {% endif %}
    {% set purge_move_speed = 2.31 * printer["gcode_macro _printcfg"].purge_size * printer["gcode_macro _printcfg"].purge_flow_rate / (printer["gcode_macro _printcfg"].purge_amount * 2.405) %}
    {% set prepurge_speed = printer["gcode_macro _printcfg"].purge_flow_rate / 2.405 %}
    { action_respond_info( "x: " + x_origin|string + " y: " + y_origin|string + " purge_move_speed: " + purge_move_speed|string + " prepurge_speed: " + prepurge_speed|string ) }
    {% if printer["gcode_macro _printcfg"].led_status == True %}
        {printer["gcode_macro _printcfg"].status_clean} ; LED feedback
    {% endif %}
    G92 E0
    G0 F{printer["gcode_macro _printcfg"].travel_speed*60}                                                               # Set travel speed
    G90                                                                                 # Absolute positioning
    G0 X{x_origin} Y{y_origin+printer["gcode_macro _printcfg"].purge_size/2}                                                   # Move to purge position
    G0 Z{printer["gcode_macro _printcfg"].purge_z_height}                                                                      # Move to purge Z height
    M83                                                                                 # Relative extrusion mode
    G1 E{printer["gcode_macro _printcfg"].purge_tip_distance} F{prepurge_speed*60}                                             # Move tip of filament to nozzle
    G1 X{x_origin+printer["gcode_macro _printcfg"].purge_size*0.289} Y{y_origin+printer["gcode_macro _printcfg"].purge_size} E{printer["gcode_macro _printcfg"].purge_amount/4} F{purge_move_speed*60} # Purge first line of logo
    G1 E-.5 F2100                                                                       # Retract
    G0 Z{printer["gcode_macro _printcfg"].purge_z_height*2}                                                                    # Z hop
    G0 X{x_origin+printer["gcode_macro _printcfg"].purge_size*0.789} Y{y_origin+printer["gcode_macro _printcfg"].purge_size}                                          # Move to second purge line origin
    G0 Z{printer["gcode_macro _printcfg"].purge_z_height}                                                                      # Move to purge Z height
    G1 E.5 F2100                                                                        # Recover
    G1 X{x_origin+printer["gcode_macro _printcfg"].purge_size*0.211} Y{y_origin} E{printer["gcode_macro _printcfg"].purge_amount/2} F{purge_move_speed*60}      # Purge second line of logo
    G1 E-.5 F2100                                                                       # Retract
    G0 Z{printer["gcode_macro _printcfg"].purge_z_height*2}                                                                    # Z hop
    G0 X{x_origin+printer["gcode_macro _printcfg"].purge_size*0.711} Y{y_origin}                                               # Move to third purge line origin
    G0 Z{printer["gcode_macro _printcfg"].purge_z_height}                                                                      # Move to purge Z height
    G1 E.5 F2100                                                                        # Recover
    G1 X{x_origin+printer["gcode_macro _printcfg"].purge_size} Y{y_origin+printer["gcode_macro _printcfg"].purge_size/2}  E{printer["gcode_macro _printcfg"].purge_amount/4} F{purge_move_speed*60}    # Purge third line of logo
    G1 E-.5 F2100                                                                       # Retract
    G92 E0                                                                              # Reset extruder distance
    G0 Z{printer["gcode_macro _printcfg"].purge_z_height*2}                                                                    # Z hop

################################
######### CLEAN_NOZZLE #########
################################
[gcode_macro CLEAN_NOZZLE]
variable_pre_hot: True
gcode:
    HOME_IF_NEEDED
    {% set nozzle_targ = params.TARGET|default(0)|float %}
    {% set is_hot = params.HOT|default(pre_hot) %}
    {% if is_hot == False %}
        {% if printer["gcode_macro _printcfg"].led_status == True %}
            {printer["gcode_macro _printcfg"].status_heat}
        {% endif %}
        M{printer["gcode_macro _printcfg"].output} Heating extruder..
        {% if nozzle_targ > 0 %}
            M109 S{nozzle_targ}
        {% elif printer["gcode_macro _printcfg"].clean_temp > 0 %}
            M109 S{printer["gcode_macro _printcfg"].clean_temp}
        {% endif %}
    {% endif %}
    G90                                            ; absolute positioning
    ## Move nozzle to start position
    G1 X{printer["gcode_macro _printcfg"].clean_x} Y{printer["gcode_macro _printcfg"].clean_y} F6000
    G1 Z{printer["gcode_macro _printcfg"].clean_z} F1500
    # Set lighting
    {% if printer["gcode_macro _printcfg"].led_status == True %}
        {printer["gcode_macro _printcfg"].status_clean} ; LED feedback
    {% endif %}
    ## Wipe nozzle
    M{printer["gcode_macro _printcfg"].output} Wiping nozzle..
    {% for wipes in range(1, (printer["gcode_macro _printcfg"].clean_wipe_qty + 1)) %}
    G1 X{printer["gcode_macro _printcfg"].clean_x + printer["gcode_macro _printcfg"].clean_wipe_dist} F{printer["gcode_macro _printcfg"].clean_wipe_speed * 60}
    G1 X{printer["gcode_macro _printcfg"].clean_x} F{printer["gcode_macro _printcfg"].clean_wipe_speed * 60}
    {% endfor %}
    ## Raise nozzle
    G1 Z{printer["gcode_macro _printcfg"].clean_raise_dist}
    {% if is_hot == False %}
        M{printer["gcode_macro _printcfg"].output} Cooling extruder..
        M104 S0
    {% endif %}

################################
########## SCRUBBER ############
################################
[gcode_macro SCRUBBER]
description: Run the Nevermore for a set time
gcode:
    M{printer["gcode_macro _printcfg"].output} Scrubbing VOCs ; status feedfback
    {% if printer["gcode_macro _printcfg"].led_status == True %}
        STATUS_CLEANING ; LED feedback
    {% endif %}
    # Turn on Nevermore to scrub
    SET_FAN_SPEED FAN={printer["gcode_macro _printcfg"].nevermore_name} SPEED={printer["gcode_macro _printcfg"].scrub_speed}
    # Set shut-off timer
    UPDATE_DELAYED_GCODE ID=scrub_timer DURATION={printer["gcode_macro _printcfg"].scrub_time}
[delayed_gcode scrub_timer]
gcode:
    # Turn off Nevermore
    SET_FAN_SPEED FAN={printer["gcode_macro _printcfg"].nevermore_name} SPEED=0
    M{printer["gcode_macro _printcfg"].output} Scrubbing complete ; status feedfback
    {% if printer["gcode_macro _printcfg"].led_status == True %}
        STATUS_READY ; LED feedback
    {% endif %}

################################
###### FILTER TRACKING #########
################################
[gcode_macro RESET_AIR_FILTER]
description: Resets the air-filter replacement timer
gcode:
    SET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0
    SAVE_VARIABLE VARIABLE=air_filter_time VALUE=0
    { action_respond_info("Air filter timer has been reset.") }
[gcode_macro QUERY_AIR_FILTER]
description: Displays the amount of time the air filter has run since it was last reset.
gcode:
    {% set hours = "%.2f"|format(printer['gcode_macro _printcfg'].filter_time|int / 3600) %}
    { action_respond_info("Air Filter Hours: " + hours) }
[delayed_gcode _AIR_FILTER_TIMER]
initial_duration: 1
gcode:
    {% set cached_time = printer['gcode_macro _printcfg'].filter_time|int %}
        {% if cached_time == -1 %}
            {% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}
            SET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }
        {% endif %}
    {% if printer[printer['gcode_macro _printcfg'].nevermore_type printer['gcode_macro _printcfg'].nevermore_name].speed|float > 0 %}
        SET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}
    {% endif %}
    {% set replacement_seconds = printer['gcode_macro _printcfg'].hours_until_replacement|float * 3600 %}
    {% if cached_time > replacement_seconds %}
    { printer['gcode_macro _printcfg'].filter_replacement }
    {% endif %}
    UPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1
[delayed_gcode _AIR_FILTER_FLUSH_TIMER]
initial_duration: 300
gcode:
    {% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}
    {% set actual_time = printer['gcode_macro _printcfg'].filter_time|float %}
    {% if saved_time != actual_time %}
        SAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}
    {% endif %}
    UPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300

################################
########### Aliases ############
################################
[gcode_macro PREP_PRINT]
gcode:
    START_PRINT { rawparams }

[gcode_macro PRINT_START]
gcode:
    START_PRINT { rawparams }

[gcode_macro PRESENT_PRINT]
gcode:
    END_PRINT { rawparams }







################################
############# WIP ##############
################################
#     Below are unfinished 
#      and nonfunctioning:

################################
###### LAYER SCHEDULING ########
################################
[gcode_macro SCHEDULE_LAYER]
description: Schedule a command to run when a specified layer is reached
gcode:
    {% set trigger_layer = params.LAYER|default(0)|int %}
    {% set trigger_command = params.COMMAND|default("M117")|string %}
    {% if trigger_layer > printer.print_stats.info.current_layer and trigger_layer <= printer.print_stats.info.total_layer %}
        SET_GCODE_VARIABLE MACRO=_LAYER_MACRO VARIABLE=trigger_layer VALUE={trigger_layer}
        SET_GCODE_VARIABLE MACRO=_LAYER_MACRO VARIABLE=trigger_command VALUE={trigger_command}
        RESPOND TYPE=info MSG="Succesfully scheduled command for Layer {trigger_layer}."
    {% elif  trigger_layer > printer.print_stats.info.total_layer %}
        RESPOND TYPE=error MSG="ERROR creating schedule."
        RESPOND TYPE=error MSG="Layer {trigger_layer} does not exist."
        RESPOND TYPE=error MSG="There are only {printer.print_stats.info.total_layer} layers."
    {% elif  trigger_layer > printer.print_stats.info.total_layer %}
        RESPOND TYPE=error MSG="ERROR creating schedule."
        RESPOND TYPE=error MSG="Layer {trigger_layer} is in the past."
        RESPOND TYPE=error MSG="The current layer is {printer.print_stats.info.current_layer}."
    {% elif trigger_layer <= 0 %}
        RESPOND TYPE=error MSG="ERROR creating schedule."
        RESPOND TYPE=error MSG="Layer {trigger_layer} does not exist."
        RESPOND TYPE=info MSG="Please use SCHEDULE_CANCEL to cancel layer schedules."
    {% else %}
        RESPOND TYPE=error MSG="ERROR creating schedule."
        RESPOND TYPE=error MSG="UNKNOWN ERROR, contact developer."
    {% endif %}
[gcode_macro SCHEDULE_CANCEL]
description: Cancel any scheduled layer command
gcode:
    SET_GCODE_VARIABLE MACRO=_LAYER_MACRO VARIABLE=trigger_layer VALUE=0
    SET_GCODE_VARIABLE MACRO=_LAYER_MACRO VARIABLE=trigger_command VALUE="M117"
    RESPOND TYPE=info MSG="Succesfully canceled scheduled layer command."
[gcode_macro _LAYER_MACRO]
variable_trigger_layer: 0
variable_trigger_command: "M117"
gcode:
    {% set t_layer = printer["gcode_macro _LAYER_MACRO"].trigger_layer|default(0)|int %}
    {% set commnd = printer["gcode_macro _LAYER_MACRO"].trigger_command|default("M117")|string %}
    {% if t_layer > 0 %} ;Don't trigger at layer 0
        {% if printer.print_stats.info.current_layer == t_layer %} ;Are we at the trigger layer?
            RESPOND MSG="Layer {t_layer}: Event Triggered."
            {commnd} ;Run Layer Command
        {% endif %}
    {% endif %}