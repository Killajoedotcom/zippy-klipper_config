#####################################
#         Start Print Macro         #
#       Version 2.0  2023-1-4       #
#####################################

################################
######### START_PRINT ##########
################################
[gcode_macro START_PRINT]
gcode:
    {% if printer["gcode_macro _printcfg"].auto_filsensor == True %}
        # Turn on Filament Sensor
        ENABLEFILAMENTSENSOR
    {% endif %}
    # Define positioning system
    G90 ; use absolute coordinates
    M83 ; extruder relative mode
    # Preheat bed surface
    HEAT_SURFACE
    # Preheat/soak chamber
    PREP_CHAMBER
    # Prepapre fans
    PREP_FANS
    # Prepare bed suface
    PREP_SURFACE
    # Preheat hotend
    PREP_EXTRUDER
    # Status notifications
    {% if printer["gcode_macro _printcfg"].audio_status == True %}
        {printer["gcode_macro _printcfg"].start_audio} ; audio feedback
    {% endif %}
    M{printer["gcode_macro _printcfg"].output} Print Started ; status feedfback
    {% if printer["gcode_macro _printcfg"].led_status == True %}
        STATUS_PRINTING ; LED feedback
    {% endif %}

################################
######### HEAT_SURFACE #########
################################
[gcode_macro HEAT_SURFACE]
gcode:
    # Preheat bed
    {% if printer["gcode_macro _printcfg"].bed_temp > 0 %}
        {% if printer["gcode_macro _printcfg"].led_status == True %}
            STATUS_HEATING ; LED feedback
        {% endif %}
        {% if printer["gcode_macro _printcfg"].extruder_pretemp > 0 %}
            M{printer["gcode_macro _printcfg"].output} Warming extruder ; status feedfback
            SET_HEATER_TEMPERATURE HEATER=extruder TARGET={printer["gcode_macro _printcfg"].extruder_pretemp} ; allow partial nozzle warmup
        {% endif %}
        M{printer["gcode_macro _printcfg"].output} Preheating bed ; status feedfback
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={printer["gcode_macro _printcfg"].bed_temp}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={printer["gcode_macro _printcfg"].bed_temp-1} MAXIMUM={printer["gcode_macro _printcfg"].bed_temp+5}
    {% endif %}

################################
######### PREP_CHAMBER #########
################################
[gcode_macro PREP_CHAMBER]
gcode:
    {% if printer["gcode_macro _printcfg"].chamber_temp != 0 %}
        M{printer["gcode_macro _printcfg"].output} Preheating chamber ; status feedfback
        {% if printer["gcode_macro _printcfg"].led_status == True %}
            STATUS_HEATING ; LED feedback
        {% endif %}
        {% if printer["gcode_macro _printcfg"].chamber_type == 'temperature_fan' %}
            SET_TEMPERATURE_FAN_TARGET temperature_fan={printer["gcode_macro _printcfg"].chamber_name} target={printer["gcode_macro _printcfg"].chamber_temp}
        {% elif printer["gcode_macro _printcfg"].chamber_type == 'heater_generic' %}
            SET_HEATER_TEMPERATURE HEATER={printer["gcode_macro _printcfg"].chamber_name} TARGET={printer["gcode_macro _printcfg"].chamber_temp}
        {% endif %}
        {% if printer["gcode_macro _printcfg"].heat_soak == True %}
            {% if printer["gcode_macro _printcfg"].time_soak == True %}
                M{printer["gcode_macro _printcfg"].output} Soaking {printer["gcode_macro _printcfg"].chamber_time}mins ; status feedfback
                G4 S{printer["gcode_macro _printcfg"].chamber_time*60}
            {% endif %}
            {% if printer["gcode_macro _printcfg"].temp_soak == True %}
                M{printer["gcode_macro _printcfg"].output} Soaking until {printer["gcode_macro _printcfg"].chamber_time}Â° ; status feedfback
                TEMPERATURE_WAIT SENSOR={printer["gcode_macro _printcfg"].chamber_name} MINIMUM={printer["gcode_macro _printcfg"].chamber_temp} MAXIMUM={printer["gcode_macro _printcfg"].chamber_temp+25}
            {% endif %}
        {% endif %}
    {% endif %}

################################
########## PREP_FANS ###########
################################
[gcode_macro PREP_FANS]
gcode:
    {% if printer["gcode_macro _printcfg"].nevermore_speed > 0 %}
        SET_FAN_SPEED FAN={printer["gcode_macro _printcfg"].nevermore_name} SPEED={printer["gcode_macro _printcfg"].nevermore_speed}
    {% endif %}
    {% if printer["gcode_macro _printcfg"].controller_fan == True %}
        {printer["gcode_macro _printcfg"].controller_fan_start}
    {% endif %}

################################
######### PREP_SURFACE #########
################################
[gcode_macro PREP_SURFACE]
gcode:
    # Homing/undock probe
    {% if printer["gcode_macro _printcfg"].docking_probe == True %}
        # Get probe
        M{printer["gcode_macro _printcfg"].output} Collecting probe ; status feedfback
        {% if printer["gcode_macro _printcfg"].led_status == True %}
            STATUS_HOMING ; LED feedback
        {% endif %}
        {% if printer.toolhead.homed_axes != "xyz" %}
            M{printer["gcode_macro _printcfg"].output} Homing XY ; status feedfback
            G28 Y X ; home XY axis
        {% endif %}
        Attach_Probe_Lock ; attach probe
        M{printer["gcode_macro _printcfg"].output} Homing Z ; status feedfback
        G28 Z ; home Z axis
    {% else %}
        HOME_IF_NEEDED
    {% endif %}
    # Z-tilt or QGL
    {% if printer["gcode_macro _printcfg"].z_tilt == True %}
        M{printer["gcode_macro _printcfg"].output} Calibrate Z ; status feedfback
        {% if printer["gcode_macro _printcfg"].led_status == True %}
            STATUS_CALIBRATING_Z ; LED feedback
        {% endif %}
        Z_TILT_ADJUST ; adjust z-tilt
    {% elif printer["gcode_macro _printcfg"].qgl == True %}
        M{printer["gcode_macro _printcfg"].output} Calibrate Z ; status feedfback
        {% if printer["gcode_macro _printcfg"].led_status == True %}
            STATUS_CALIBRATING_Z ; LED feedback
        {% endif %}
        QUAD_GANTRY_LEVEL  ; adjust QGL
    {% endif %}
    # Bed mesh
    {% if printer["gcode_macro _printcfg"].z_tilt == True %}
        M{printer["gcode_macro _printcfg"].output} Mesh print area ; status feedfback
        BED_MESH_CALIBRATE
    {% endif %}
    # Dock probe
    {% if printer["gcode_macro _printcfg"].docking_probe == True %}
        M{printer["gcode_macro _printcfg"].output} Docking probe ; status feedfback
        Dock_Probe_Unlock ; dock probe
    {% endif %}

################################
######## PREP_EXTRUDER #########
################################
[gcode_macro PREP_EXTRUDER]
gcode:
    M{printer["gcode_macro _printcfg"].output} Preheating tool ; status feedfback
    {% if printer["gcode_macro _printcfg"].led_status == True %}
        STATUS_HEATING ; LED feedback
    {% endif %}
    M104 S{printer["gcode_macro _printcfg"].extruder_temp} ; set final nozzle temp
    # Park for preheating
    {% if printer["gcode_macro _printcfg"].cleaning == True %}
        G1 Z{25 + printer["gcode_macro CLEAN_NOZZLE"].start_z} F240
        G1 X{printer["gcode_macro CLEAN_NOZZLE"].start_x} Y{printer["gcode_macro CLEAN_NOZZLE"].start_y} F3000 ; move to park position
    {% else %}
        G1 Z{printer["gcode_macro _printcfg"].preheat_z} F240
        G1 X{printer["gcode_macro _printcfg"].preheat_x} Y{printer["gcode_macro _printcfg"].preheat_y} F3000 ; move to park position
    {% endif %}
    # Wait for heating to complete
    M109 S{printer["gcode_macro _printcfg"].extruder_temp} ; wait for nozzle temp to stabilize
    # Nozzle Cleaning
    {% if printer["gcode_macro _printcfg"].cleaning == True %}
        {% if printer["gcode_macro _printcfg"].led_status == True %}
            STATUS_CLEANING ; LED feedback
        {% endif %}
        {% if printer["gcode_macro _printcfg"].audio_status == True %}
            {printer["gcode_macro _printcfg"].clean_macro} ; audio feedback
        {% endif %}
    {% endif %}
    # Nozzle Purging
    {% if printer["gcode_macro _printcfg"].purging == True %}
        {% if printer["gcode_macro _printcfg"].led_status == True %}
            STATUS_CLEANING ; LED feedback
        {% endif %}
        {% if printer["gcode_macro _printcfg"].audio_status == True %}
            {printer["gcode_macro _printcfg"].purge_macro} ; purge nozzle
        {% endif %}
    {% endif %}

################################
########## END_PRINT ###########
################################
[gcode_macro END_PRINT]
description: Present the finished print
gcode:
    {% if printer["gcode_macro _printcfg"].end_print == True %}
        {% if printer["gcode_macro _printcfg"].led_status == True %}
            STATUS_PART_READY ; LED feedback
        {% endif %}
        STOP_COMPONENTS
        # Acknowledge success!
        M{printer["gcode_macro _printcfg"].output} Print Complete ; status feedfback
        {% if printer["gcode_macro _printcfg"].audio_status == True %}
            {printer["gcode_macro _printcfg"].success_audio} ; audio feedback
        {% endif %}
        {% if printer["gcode_macro _printcfg"].led_status == True %}
            STATUS_READY ; LED feedback
        {% endif %}
        {% if printer["gcode_macro _printcfg"].unload_filament == True %}
            {printer["gcode_macro _printcfg"].m600} ; unload filament
        {% endif %}
        {% if printer["gcode_macro _printcfg"].power_off == True %}
            {printer["gcode_macro _printcfg"].off_macro} ; power off printer
        {% endif %}
    {% endif %}

################################
######## CANCEL_PRINT ##########
################################
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
    M{printer["gcode_macro _printcfg"].output} Print Canceled ; status feedfback
    {% if printer["gcode_macro _printcfg"].led_status == True %}
        STATUS_ERROR ; LED feedback
    {% endif %}
    ## Move head and retract only if not already in the pause state and park set to true
    {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
        _TOOLHEAD_PARK_PAUSE_CANCEL
    {% endif %}
    {% if printer["gcode_macro _printcfg"].audio_status == True %}
        {printer["gcode_macro _printcfg"].error_audio} ; audio feedback
    {% endif %}
    STOP_COMPONENTS
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE

################################
###### STOP_COMPONENTS #########
################################
[gcode_macro STOP_COMPONENTS]
gcode:
    {% if printer["gcode_macro _printcfg"].auto_filsensor == True %}
        # Disable filament sensor
        DISABLEFILAMENTSENSOR
    {% endif %}
    {% if printer["gcode_macro _printcfg"].controller_fan == True %}
        {printer["gcode_macro _printcfg"].controller_fan_stop}
    {% endif %}
    {% if printer["gcode_macro _printcfg"].use_scrubber == True %}
        # Scrub VOCs
        SCRUBBER
    {% endif %}

################################
########## SCRUBBER ############
################################
[gcode_macro SCRUBBER]
description: Run the Nevermore for a set time
gcode:
    M{printer["gcode_macro _printcfg"].output} Scrubbing VOCs ; status feedfback
    {% if printer["gcode_macro _printcfg"].led_status == True %}
        STATUS_CLEANING ; LED feedback
    {% endif %}
    # Turn on Nevermore to scrub
    SET_FAN_SPEED FAN={printer["gcode_macro _printcfg"].nevermore_name} SPEED={printer["gcode_macro _printcfg"].scrub_speed}
    # Set shut-off timer
    UPDATE_DELAYED_GCODE ID=scrub_timer DURATION={printer["gcode_macro _printcfg"].scrub_time}
[delayed_gcode scrub_timer]
gcode:
    # Turn off Nevermore
    SET_FAN_SPEED FAN={printer["gcode_macro _printcfg"].nevermore_name} SPEED=0
    M{printer["gcode_macro _printcfg"].output} Scrubbing complete ; status feedfback
    {% if printer["gcode_macro _printcfg"].led_status == True %}
        STATUS_READY ; LED feedback
    {% endif %}

################################
########### Aliases ############
################################
[gcode_macro PREP_PRINT]
gcode:
    START_PRINT { rawparams }

[gcode_macro PRINT_START]
gcode:
    START_PRINT { rawparams }

[gcode_macro PRESENT_PRINT]
gcode:
    END_PRINT { rawparams }