################################
######### GET_SYS_INFO #########
################################
[gcode_macro GET_SYS_INFO]
gcode:
    RESPOND MSG="Load: "{printer.system_stats.sysload}
    RESPOND MSG="CPU: "{printer.system_stats.cputime}"%"
    RESPOND MSG="Free Mem: "{printer.system_stats.memavail}" B"

################################
######### PRINT_STATS ##########
################################
[gcode_macro GET_PRINT_STATS]
gcode:
    RESPOND MSG="File: "{printer.print_stats.filename}
    RESPOND MSG="File Path: "{printer.virtual_sdcard.file_path}
    RESPOND MSG="File Position: "{printer.virtual_sdcard.file_position}
    RESPOND MSG="File Size: "{printer.virtual_sdcard.file_size}
    RESPOND MSG="Total Duration: "{printer.print_stats.total_duration}
    RESPOND MSG="Print Duration: "{printer.print_stats.print_duration}
    RESPOND MSG="Filament Used: "{printer.print_stats.filament_used}
    RESPOND MSG="State: "{printer.print_stats.state}
    RESPOND MSG="State: "{printer.print_stats.message}
    RESPOND MSG="Total Layers: "{printer.print_stats.info.total_layer}
    RESPOND MSG="Current Layer: "{printer.print_stats.info.current_layer}
    RESPOND MSG="Paused: "{printer.pause_resume.is_paused}
    RESPOND MSG="Idle State: "{printer.idle_timeout.state}
    RESPOND MSG="Printing Time: "{printer.idle_timeout.printing_time}
    RESPOND MSG="Print Active: "{printer.virtual_sdcard.is_active}
    RESPOND MSG="Print Progress: "{printer.virtual_sdcard.progress}

################################
######## POSITION_STATS ########
################################
[gcode_macro GET_POSITION_STATS]
gcode:
    {% set FIL_SWITCH = 'filament_switch_sensor filament_sensor' %}
    {% set FIL_MOTION = 'filament_motion_sensor filament_motion' %}
    {% set CHAMBER_HEAT = 'temperature_fan chamber' %}
    {% set config = printer.configfile.config %}
    {% if printer.toolhead.homed_axes %}
        RESPOND MSG="Homed Axis: "{printer.toolhead.homed_axes}
    {% else %}
        RESPOND MSG="Homed Axis: none"
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
        GET_POSITION
        RESPOND MSG="Gcode Position: X{printer.gcode_move.gcode_position.x}, Y{printer.gcode_move.gcode_position.y}, Z{printer.gcode_move.gcode_position.z}, E{printer.gcode_move.gcode_position.e}"
        RESPOND MSG="Stalls: "{printer.toolhead.stalls}
        RESPOND MSG="Minimum Position: X{printer.toolhead.axis_minimum.x}, Y{printer.toolhead.axis_minimum.y}, Z{printer.toolhead.axis_minimum.z}"
        RESPOND MSG="Maximum Position: X{printer.toolhead.axis_maximum.x}, Y{printer.toolhead.axis_maximum.y}, Z{printer.toolhead.axis_maximum.z}"
        RESPOND MSG="Maximum Velocity: {printer.toolhead.max_velocity}mm/s"
        RESPOND MSG="Maximum Acceleration: {printer.toolhead.max_accel}mm/s/s"
        RESPOND MSG="Maximum Accel-to-Decel: {printer.toolhead.max_accel_to_decel}mm/s/s"
        RESPOND MSG="Square Corner Velocity: {printer.toolhead.square_corner_velocity}mm/s"
        RESPOND MSG="Live Velocity: {printer.motion_report.live_velocity}mm/s"
        RESPOND MSG="Gcode Speed: {printer.gcode_move.speed}mm/s"
        RESPOND MSG="Gcode Speed Factor: {(printer.gcode_move.speed_factor * 100)}%"
        RESPOND MSG="Gcode Extrude Factor: {(printer.gcode_move.extrude_factor * 100)}%"
        RESPOND MSG="Absolute Positioning: "{printer.gcode_move.absolute_coordinates}
        RESPOND MSG="Absolute Extrusion: "{printer.gcode_move.absolute_extrude}
        GET_PROBE_LIMITS
        {% if printer.quad_gantry_level %}
            RESPOND MSG="Quad gantry Level Applied: "{printer.quad_gantry_level.applied}
        {% endif %}
        {% if printer.z_tilt %}
            RESPOND MSG="Z-Tilt Applied: "{printer.z_tilt.applied}
        {% endif %}
        {% if printer.bed_mesh %}
            {% set bed_mesh = printer.bed_mesh %}
            RESPOND MSG="Bed Mesh Profile: "{bed_mesh.profile_name}
            RESPOND MSG="Bed Mesh Min: {bed_mesh.mesh_min}"
            RESPOND MSG="Bed Mesh Max: {bed_mesh.mesh_max}"
        {% endif %}
        {% if printer[FIL_SWITCH] %}
            {% set fil_sensor = printer[FIL_SWITCH] %}
            RESPOND MSG="Filament Sensor Enabled: "{fil_sensor.enabled}
            RESPOND MSG="Filament Detected: "{fil_sensor.filament_detected}
        {% endif %}
        {% if printer[FIL_MOTION] %}
            {% set fil_sensor = printer[FIL_MOTION] %}
            RESPOND MSG="Filament Sensor Enabled: "{fil_sensor.enabled}
            RESPOND MSG="Filament Detected: "{fil_sensor.filament_detected}
        {% endif %}
        {% set extruder = printer['extruder'] %}
        {% set heater_bed = printer['heater_bed'] %}
        {% set chamber = printer[CHAMBER_HEAT] %}
        RESPOND MSG="Extruder Temperature: {extruder.temperature}C"
        RESPOND MSG="Extruder Target Temp: {extruder.target}C"
        RESPOND MSG="Extruder Power: {(extruder.power * 100)}%"
        RESPOND MSG="Extruder Can Extrude: {extruder.can_extrude}"
        RESPOND MSG="Bed Temperature: {heater_bed.temperature}C"
        RESPOND MSG="Bed Target Temp: {heater_bed.target}C"
        RESPOND MSG="Bed Power: {(heater_bed.power * 100)}%"
        {% if chamber %}
            RESPOND MSG="Chamber Temperature: {chamber.temperature}C"
            RESPOND MSG="Chamber Target Temp: {chamber.target}C"
            {% if chamber.speed %}
                RESPOND MSG="Chamber Fan: {(chamber.speed * 100)}%"
            {% elif chamber.power %}
                RESPOND MSG="Bed Power: {(heater_bed.power * 100)}%"
            {% endif %}
        {% endif %}
        {% if config["tmc2130 stepper_x"] %}
            {% set xyz_drive = True %}
            {% set driver_x = printer["tmc2130 stepper_x"] %}
            {% set driver_y = printer["tmc2130 stepper_y"] %}
            {% set driver_z = printer["tmc2130 stepper_z"] %}
            {% if config["tmc2130 stepper_z1"] %}
                {% set driver_z1 = printer["tmc2130 stepper_z1"] %}
            {% else %}
                {% set driver_z1 = 0 %}
            {% endif %}
        {% elif config["tmc2208 stepper_x"] %}
            {% set xyz_drive = True %}
            {% set driver_x = printer["tmc2208 stepper_x"] %}
            {% set driver_y = printer["tmc2208 stepper_y"] %}
            {% set driver_z = printer["tmc2208 stepper_z"] %}
            {% if config["tmc2208 stepper_z1"] %}
                {% set driver_z1 = printer["tmc2208 stepper_z1"] %}
            {% else %}
                {% set driver_z1 = 0 %}
            {% endif %}
        {% elif config["tmc2209 stepper_x"] %}
            {% set xyz_drive = True %}
            {% set driver_x = printer["tmc2209 stepper_x"] %}
            {% set driver_y = printer["tmc2209 stepper_y"] %}
            {% set driver_z = printer["tmc2209 stepper_z"] %}
            {% if config["tmc2209 stepper_z1"] %}
                {% set driver_z1 = printer["tmc2209 stepper_z1"] %}
            {% else %}
                {% set driver_z1 = 0 %}
            {% endif %}
        {% elif config["tmc2660 stepper_x"] %}
            {% set xyz_drive = True %}
            {% set driver_x = printer["tmc2660 stepper_x"] %}
            {% set driver_y = printer["tmc2660 stepper_y"] %}
            {% set driver_z = printer["tmc2660 stepper_z"] %}
            {% if config["tmc2660 stepper_z1"] %}
                {% set driver_z1 = printer["tmc2660 stepper_z1"] %}
            {% else %}
                {% set driver_z1 = 0 %}
            {% endif %}
        {% elif config["tmc5160 stepper_x"] %}
            {% set xyz_drive = True %}
            {% set driver_x = printer["tmc5160 stepper_x"] %}
            {% set driver_y = printer["tmc5160 stepper_y"] %}
            {% set driver_z = printer["tmc5160 stepper_z"] %}
            {% if config["tmc5160 stepper_z1"] %}
                {% set driver_z1 = printer["tmc5160 stepper_z1"] %}
            {% else %}
                {% set driver_z1 = 0 %}
            {% endif %}
        {% elif config["tmc2130 stepper_a"] %}
            {% set xyz_drive = False %}
            {% set driver_x = printer["tmc2130 stepper_a"] %}
            {% set driver_y = printer["tmc2130 stepper_b"] %}
            {% set driver_z = printer["tmc2130 stepper_c"] %}
            {% set driver_z1 = 0 %}
        {% elif config["tmc2208 stepper_a"] %}
            {% set xyz_drive = False %}
            {% set driver_x = printer["tmc2208 stepper_a"] %}
            {% set driver_y = printer["tmc2208 stepper_b"] %}
            {% set driver_z = printer["tmc2208 stepper_c"] %}
            {% set driver_z1 = 0 %}
        {% elif config["tmc2209 stepper_a"] %}
            {% set xyz_drive = False %}
            {% set driver_x = printer["tmc2209 stepper_a"] %}
            {% set driver_y = printer["tmc2209 stepper_b"] %}
            {% set driver_z = printer["tmc2209 stepper_c"] %}
            {% set driver_z1 = 0 %}
        {% elif config["tmc2260 stepper_a"] %}
            {% set xyz_drive = False %}
            {% set driver_x = printer["tmc2260 stepper_a"] %}
            {% set driver_y = printer["tmc2260 stepper_b"] %}
            {% set driver_z = printer["tmc2260 stepper_c"] %}
            {% set driver_z1 = 0 %}
        {% elif config["tmc5160 stepper_a"] %}
            {% set xyz_drive = False %}
            {% set driver_x = printer["tmc5160 stepper_a"] %}
            {% set driver_y = printer["tmc5160 stepper_b"] %}
            {% set driver_z = printer["tmc5160 stepper_c"] %}
            {% set driver_z1 = 0 %}
        {% else %}
            {% set driver = 0 %}
        {% endif %}
        {% if config["tmc2130 extruder"] %}
            {% set driver_e = printer["tmc2130 extruder"] %}
        {% elif config["tmc2208 extruder"] %}
            {% set driver_e = printer["tmc2208 extruder"] %}
        {% elif config["tmc2209 extruder"] %}
            {% set driver_e = printer["tmc2209 extruder"] %}
        {% elif config["tmc2260 extruder"] %}
            {% set driver_e = printer["tmc2260 extruder"] %}
        {% elif config["tmc5160 extruder"] %}
            {% set driver_e = printer["tmc5160 extruder"] %}
        {% else %}
            {% set driver = 0 %}
        {% endif %}
        {% if driver != 0 %}
            {% if xyz_driver = True %}
                RESPOND MSG="X Stepper Run Current: "{driver_x.run_current}
                {% if driver_x.hold_current %}
                    RESPOND MSG="X Stepper Hold Current: "{driver_x.hold_current}
                {% endif %}
                RESPOND MSG="Y Stepper Run Current: "{driver_y.run_current}
                {% if driver_y.hold_current %}
                    RESPOND MSG="Y Stepper Hold Current: "{driver_y.hold_current}
                {% endif %}
                {% if driver_z1 == 0 %}
                    RESPOND MSG="Z Stepper Run Current: "{driver_z.run_current}
                    {% if driver_z.hold_current %}
                        RESPOND MSG="Z Stepper Hold Current: "{driver_z.hold_current}
                    {% endif %}
                {% else %}
                    RESPOND MSG="Z0 Stepper Run Current: "{driver_z.run_current}
                    {% if driver_z.hold_current %}
                        RESPOND MSG="Z0 Stepper Hold Current: "{driver_z.hold_current}
                    {% endif %}
                    RESPOND MSG="Z1 Stepper Run Current: "{driver_z1.run_current}
                    {% if driver_z1.hold_current %}
                        RESPOND MSG="Z1 Stepper Hold Current: "{driver_z1.hold_current}
                    {% endif %}
                {% endif %}
            {% else %}
                RESPOND MSG="A Stepper Run Current: "{driver_x.run_current}
                {% if driver_x.hold_current %}
                    RESPOND MSG="A Stepper Hold Current: "{driver_x.hold_current}
                {% endif %}
                RESPOND MSG="B Stepper Run Current: "{driver_y.run_current}
                {% if driver_y.hold_current %}
                    RESPOND MSG="B Stepper Hold Current: "{driver_y.hold_current}
                {% endif %}
                RESPOND MSG="C Stepper Run Current: "{driver_z.run_current}
                {% if driver_z.hold_current %}
                    RESPOND MSG="C Stepper Hold Current: "{driver_z.hold_current}
                {% endif %}
            {% endif %}
            RESPOND MSG="Extruder Run Current: "{driver_e.run_current}
            {% if driver_e.hold_current %}
                RESPOND MSG="Extruder Hold Current: "{driver_e.hold_current}
            {% endif %}
        {% endif %}
    {% else %}
        RESPOND TYPE=error MSG="All axis must be homed to retrieve position stats."
    {% endif %}


################################
############# WIP ##############
################################
#     Below are unfinished     #
#      and nonfunctioning!     #
#                              #
#         DO NOT USE!          #
#    Likely to crash prints    #
#     in current state!!!      #
#                              #
################################
###### LAYER SCHEDULING ########
################################
[gcode_macro SCHEDULE_LAYER]
description: Schedule a command to run when a specified layer is reached
gcode:
    {% set trigger_layer = params.LAYER|default(0)|int %}
    {% set trigger_command = params.CMD|default(params.COMMAND|default("M117"))|string %}
    {% if trigger_layer > printer.print_stats.info.current_layer and trigger_layer <= printer.print_stats.info.total_layer %}
        SET_GCODE_VARIABLE MACRO=_LAYER_MACRO VARIABLE=trigger_layer VALUE={trigger_layer}
        SET_GCODE_VARIABLE MACRO=_LAYER_MACRO VARIABLE=trigger_command VALUE={trigger_command}
        {printer["gcode_macro _printcfg"].output|int} "Succesfully scheduled command for Layer {trigger_layer}."
    {% elif  trigger_layer > printer.print_stats.info.total_layer %}
        {printer["gcode_macro _printcfg"].error_output|int} "ERROR creating schedule."
        {printer["gcode_macro _printcfg"].error_output|int} "Layer {trigger_layer} does not exist."
        {printer["gcode_macro _printcfg"].error_output|int} "There are only {printer.print_stats.info.total_layer} layers."
    {% elif  trigger_layer > printer.print_stats.info.total_layer %}
        {printer["gcode_macro _printcfg"].error_output|int} "ERROR creating schedule."
        {printer["gcode_macro _printcfg"].error_output|int} "Layer {trigger_layer} is in the past."
        {printer["gcode_macro _printcfg"].error_output|int} "The current layer is {printer.print_stats.info.current_layer}."
    {% elif trigger_layer <= 0 %}
        {printer["gcode_macro _printcfg"].error_output|int} "ERROR creating schedule."
        {printer["gcode_macro _printcfg"].error_output|int} "Layer {trigger_layer} does not exist."
        {printer["gcode_macro _printcfg"].output|int} "Please use SCHEDULE_CANCEL to cancel layer schedules."
    {% else %}
        {printer["gcode_macro _printcfg"].error_output|int} "ERROR creating schedule."
        {printer["gcode_macro _printcfg"].error_output|int} "UNKNOWN ERROR, contact developer."
    {% endif %}
[gcode_macro SCHEDULE_CANCEL]
description: Cancel any scheduled layer command
gcode:
    SET_GCODE_VARIABLE MACRO=_LAYER_MACRO VARIABLE=trigger_layer VALUE=0
    SET_GCODE_VARIABLE MACRO=_LAYER_MACRO VARIABLE=trigger_command VALUE="M117"
    {printer["gcode_macro _printcfg"].output|int} "Succesfully canceled scheduled layer command."
[gcode_macro _LAYER_MACRO]
variable_trigger_layer: 0
variable_trigger_command: "M117"
gcode:
    {% set t_layer = printer["gcode_macro _LAYER_MACRO"].trigger_layer|default(0)|int %}
    {% set commnd = printer["gcode_macro _LAYER_MACRO"].trigger_command|default("M117")|string %}
    {% if t_layer > 0 %} ;Don't trigger at layer 0
        {% if printer.print_stats.info.current_layer == t_layer %} ;Are we at the trigger layer?
            {printer["gcode_macro _printcfg"].output|int} "Layer {t_layer}: Event Triggered."
            {commnd} ;Run Layer Command
        {% endif %}
    {% endif %}