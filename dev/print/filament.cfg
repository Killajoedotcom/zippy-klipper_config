#####################################
#   Smart Filament Change Macros    #
#      Version 2.0.1 2023-1-3       #
#####################################
#####     PLEASE READ BELOW     #####
#####################################
# This macro requires configuration!
# 
# More information available here:
# https://github.com/rootiest/zippy-klipper_config/blob/master/extras/filament_change/README.md
# 
# You must adjust the variables
# under M600 CONFIGURATION to fit
# the specifications of your machine.

################################
###### M600 CONFIGURATION ######
################################
[gcode_macro _m600cfg]
# The following variables define the behavior of macros in this file:
variable_sensor_name: 'filament_sensor' # The name of the filament sensor used
                                        # The following manage behavior during filament changes:
variable_default_temp: 220              # The default temperature used
variable_x: -15                         # Filament change park coordinate for X
variable_y: 220                         # Filament change park coordinate for Y
variable_zmin: 150                      # Minimum filament change park height
variable_z: 10                          # Filament change z-hop height
variable_load_fast: 50                  # Length to load the filament before reaching the hotend
variable_load_slow: 75                  # Length to extrude/purge filament out of hotend
variable_unload_length: 75              # Length of filament to retract during unload
variable_purge_length: 50               # Length of filament to extrude during purge
                                        # NOTE: Speeds are given in mm/min 
variable_fast_speed: 1000               # Speed for fast extruder moves (between extruder and hotend)
variable_med_speed: 500                 # Speed for medium extruder moves (extruder catching the new filament)
variable_slow_speed: 250                # Speed for slow extruder moves (actual extrusion out of the hotend)
variable_park_speed: 9000               # Speed of X/Y moves during parking
                                        # See the documentation linked above for details about the below settings
variable_output: 118                    # Select 116, 117, or 118 to specify output method for feedback
variable_led_status: False              # Use LED Status macros such as on the stealthburner
variable_audio_status: False            # Use audio feedback macros
variable_audio_freq: 5                  # The frequency to repeat the audio tone
variable_audio_macro: 'CHANGE_TUNE'     # The frequency to repeat the audio tone
variable_use_telegram: False            # Use Telegram feedback macros
                                        # The following manages the optional automated sensor toggling:
variable_auto_sensor: True              # Automate filament sensor toggling


# Do Not Change Below
variable_coldstart: False
variable_prev_temp: 0
gcode: # No gcode needed

################################
####### CHANGE_FILAMENT ########
################################
[gcode_macro CHANGE_FILAMENT]
description: Change the filament in toolhead
gcode:
    HOME_IF_NEEDED
    SET_GCODE_VARIABLE MACRO=_m600cfg VARIABLE=coldstart VALUE=True
    M600
    UNLOAD_FILAMENT
    {% if printer["gcode_macro _m600cfg"].auto_sensor == True %}
        ENABLEFILAMENTSENSOR
    {% endif %}

################################
####### FILAMENT_RUNOUT ########
################################
[gcode_macro FILAMENT_RUNOUT]
description: Procedure when Filament Runout Sensor is triggered
gcode:
    {% if printer["gcode_macro _m600cfg"].coldstart == False %}
        M{printer["gcode_macro _m600cfg"].output|int} Filament Runout
        {% if printer["gcode_macro _m600cfg"].use_telegram == True %}
            TELEGRAM_FILAMENT_RUNOUT
        {% endif %}
        SET_IDLE_TIMEOUT TIMEOUT=3600
        {% if printer["gcode_macro _m600cfg"].audio_status == True %}
            CHANGE_TUNE
            ALERT_BEEP_ON
        {% endif %}
        M600
        SET_GCODE_VARIABLE MACRO=_m600cfg VARIABLE=prev_temp VALUE={printer.extruder.target}
        M109 S0
    {% endif %}

################################
############ M600 ##############
################################
[gcode_macro M600]
gcode:
    SET_IDLE_TIMEOUT TIMEOUT=7200 ; Increase idle timeout
    {% if printer.idle_timeout.state == "Printing" %}
        PAUSE ; Pause printing
    {% endif %}
    {% if printer["gcode_macro _m600cfg"].led_status == True %}
        STATUS_M600
    {% endif %}
    _FILAMENT_PARK
    {% if printer["gcode_macro _m600cfg"].audio_status == True %}
        ALERT_BEEP_ON
    {% endif %}

################################
####### UNLOAD_FILAMENT ########
################################
[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set LENGTH = params.LENGTH|default(printer["gcode_macro _m600cfg"].unload_length)|float %} ; Unload length
    {% set TARGET = params.TARGET|default(printer["gcode_macro _m600cfg"].default_temp)|float %} ; Unload temperature
    ##################
    {% if printer["gcode_macro _m600cfg"].audio_status == True %}
        ALERT_BEEP_OFF
    {% endif %}
    {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
    {% set cur_targ = printer.extruder.target|int %}        ; Current target
    {% if printer["gcode_macro _m600cfg"].prev_temp != 0 %}
        {% set TARGET = printer["gcode_macro _m600cfg"].prev_temp %}
    {% elif params.TARGET is defined and params.TARGET|int > printer.configfile.config.extruder.min_extrude_temp|int %} ; If current temp is below target
        {% set TARGET = params.TARGET|int|default(220) %}
    {% endif %}
    {% if printer.extruder.target < printer.configfile.config.extruder.min_extrude_temp|int %} ; Verify extruder is hot enough
        {% set TARGET = printer["gcode_macro _m600cfg"].default_temp %} ; Heat up to default temp
    {% endif %}
    {% if cur_temp < (TARGET-5) %}
        {% if printer["gcode_macro _m600cfg"].led_status == True %}
            STATUS_HEATING
        {% endif %}
        M{printer["gcode_macro _m600cfg"].output|int} Heating nozzle...
        M109 S{TARGET} ; Heat nozzle to target temperature
    {% endif %}
    {% if printer["gcode_macro _m600cfg"].led_status == True %}
        STATUS_M702
    {% endif %}
    G91 ; Relative positioning
    # Pre-unload to loosen filament
    G1 E5.0 F1200 ; Extrude a bit 
    G1 E3.0 F1600 ; Extrude a bit
    G1 E-13.14 F7000 ; pull hard
    # Unload
    G1 E-{LENGTH} F{printer["gcode_macro _m600cfg"].fast_speed|int}
    G90 ; Absolute postitioning
    M400
    {% if printer["gcode_macro _m600cfg"].auto_sensor == True %}
        ENABLEFILAMENTSENSOR
    {% endif %}

    M{printer["gcode_macro _m600cfg"].output|int} Unload Complete
    {% if printer["gcode_macro _m600cfg"].led_status == True %}
        STATUS_BUSY
    {% endif %}

################################
######## LOAD_FILAMENT #########
################################
[gcode_macro LOAD_FILAMENT]
gcode:
    {% set SLOW = params.SLOW|default(printer["gcode_macro _m600cfg"].load_slow)|float %} ; Purge amount
    {% set FAST = params.FAST|default(printer["gcode_macro _m600cfg"].load_fast)|float %} ; Load length
    ##################
    {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
    {% set cur_targ = printer.extruder.target|int %}        ; Current target
    {% if printer["gcode_macro _m600cfg"].prev_temp != 0 %}
        {% set TARGET = printer["gcode_macro _m600cfg"].prev_temp %}
    {% elif params.TARGET is defined and params.TARGET|int > printer.configfile.config.extruder.min_extrude_temp|int %} ; If current temp is below target
        {% set TARGET = params.TARGET|int|default(220) %}
    {% else %}
        {% set TARGET = 220 %}
    {% endif %}
    {% if printer.extruder.target < printer.configfile.config.extruder.min_extrude_temp|int %} ; Verify extruder is hot enough
        {% set TARGET = printer["gcode_macro _m600cfg"].default_temp %} ; Heat up to default temp
    {% else %}
        {% set TARGET = printer.extruder.target %}
    {% endif %}
    {% if cur_temp < (TARGET-5) %}
        {% if printer["gcode_macro _m600cfg"].led_status == True %}
            STATUS_HEATING
        {% endif %}
        M{printer["gcode_macro _m600cfg"].output|int} Heating nozzle...
        M109 S{TARGET} ; Heat nozzle to target temperature
    {% endif %}
    {% if printer["gcode_macro _m600cfg"].led_status == True %}
        STATUS_M701
    {% endif %}

    M{printer["gcode_macro _m600cfg"].output|int}  LOADING...
    G91 ; Relative positioning
    G1 E25.0 F{printer["gcode_macro _m600cfg"].med_speed|int} ; pre-load
    G1 E{FAST} F{printer["gcode_macro _m600cfg"].fast_speed|int} ; load up to hotend
    G4 P900 ; wait a moment
    G1 E{SLOW} F{printer["gcode_macro _m600cfg"].slow_speed|int} ; purge to change filament
    G90 ; Absolute postitioning
    M400

    {% if printer["gcode_macro _m600cfg"].coldstart == True %}
        M{printer["gcode_macro _m600cfg"].output|int} Cooling nozzle...
        M109 S0
        SET_GCODE_VARIABLE MACRO=_m600cfg VARIABLE=coldstart VALUE=False
        {% if printer["gcode_macro _m600cfg"].auto_sensor == True %}
            DISABLEFILAMENTSENSOR
        {% endif %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_m600cfg VARIABLE=prev_temp VALUE=0
    SET_IDLE_TIMEOUT TIMEOUT=900 ; Return idle timeout to normal
    {% if printer["gcode_macro _m600cfg"].audio_status == True %}
        CHANGE_TUNE
    {% endif %}
    M{printer["gcode_macro _m600cfg"].output|int} Load Complete
    {% if printer["gcode_macro _m600cfg"].led_status == True %}
        STATUS_READY
    {% endif %}


################################
############ PURGE #############
################################
[gcode_macro PURGE]
gcode:
    {% set LENGTH = params.LENGTH|default(printer["gcode_macro _m600cfg"].purge_length)|float %} ; Purge length
    ##################
    {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
    {% set cur_targ = printer.extruder.target|int %}        ; Current target
    {% if printer["gcode_macro _m600cfg"].prev_temp != 0 %}
        {% set TARGET = printer["gcode_macro _m600cfg"].prev_temp %}
    {% elif params.TARGET is defined  %} ; If current temp is below target
        {% set TARGET = params.TARGET|int %}
    {% endif %}
    {% if printer.extruder.target < printer.configfile.config.extruder.min_extrude_temp|int %} ; Verify extruder is hot enough
        {% set TARGET = printer["gcode_macro _m600cfg"].default_temp %} ; Heat up to default temp
    {% endif %}
    {% if printer["gcode_macro _m600cfg"].led_status == True %}
        STATUS_HEATING
    {% endif %}
    M{printer["gcode_macro _m600cfg"].output|int} Heating nozzle...
    M109 S{TARGET} ; Heat nozzle to target temperature
    {% if printer["gcode_macro _m600cfg"].led_status == True %}
        STATUS_M701
    {% endif %}
    M{printer["gcode_macro _m600cfg"].output|int} PURGING..
    G91 ; Relative positioning
    G1 E{LENGTH} F{printer["gcode_macro _m600cfg"].slow_speed|int} ; Purge filament
    G90 ; Absolute postitioning
    M400
    M109 S{cur_targ} ; Return target temp to previous value

    M{printer["gcode_macro _m600cfg"].output|int} Purge Complete
    {% if printer["gcode_macro _m600cfg"].led_status == True %}
        STATUS_READY
    {% endif %}

################################
########### PARKING ############
################################

# Used to park the toolhead for filament changes
[gcode_macro _FILAMENT_PARK]
gcode:
	M{printer["gcode_macro _m600cfg"].output|int} Parking toolhead...
	SET_GCODE_VARIABLE MACRO=_m600cfg VARIABLE=prev_temp VALUE={printer.extruder.target}
    G91
	{% if printer.toolhead.position.z|float + printer["gcode_macro _m600cfg"].z|float < printer.configfile.config["stepper_z"]["position_max"]|float %}
		{% if  printer.toolhead.position.z < printer["gcode_macro _m600cfg"].zmin|int %}
            G1 Z{printer["gcode_macro _m600cfg"].zmin|int|int-printer.toolhead.position.z|int}
		{% else %}
            SAVE_GCODE_STATE NAME=save_state
            G1 Z{printer["gcode_macro _m600cfg"].z|int}
            RESTORE_GCODE_STATE NAME=save_state
        {% endif %}
	{% endif%}
	G90
	G1 X{printer["gcode_macro _m600cfg"].x|int} Y{printer["gcode_macro _m600cfg"].y|int} F{printer["gcode_macro _m600cfg"].park_speed|int}

################################
########### HOMING #############
################################

# Only home if not homed
[gcode_macro HOME_IF_NEEDED]
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
        M{printer["gcode_macro _m600cfg"].output|int} Homing axis
        G28
    {% endif %}

################################
############ AUDIO #############
################################

# Audio alert macros
[delayed_gcode alert_beeper]
gcode:
    CHANGE_TUNE ; Play alert tone
    {printer["gcode_macro _m600cfg"].audio_macro}
    UPDATE_DELAYED_GCODE ID=alert_beeper DURATION={printer["gcode_macro _m600cfg"].audio_freq|int}
# Start the alert beep cycle
[gcode_macro ALERT_BEEP_ON]
gcode:
    UPDATE_DELAYED_GCODE ID=alert_beeper DURATION=1
# Stop the alert beep cycle
[gcode_macro ALERT_BEEP_OFF]
gcode:
    UPDATE_DELAYED_GCODE ID=alert_beeper DURATION=0

################################
########## TOGGLING ############
################################

# Disable filament sensor at startup
[delayed_gcode AUTO_DISABLEFILAMENTSENSOR]
initial_duration: 1
gcode:
    {% if printer["gcode_macro _m600cfg"].auto_sensor == True %} ; If automated sensor feature is enabled
        SET_FILAMENT_SENSOR SENSOR={printer["gcode_macro _m600cfg"].sensor_name} ENABLE=0 ; Disable sensor
    {% endif %}

# Enable filament sensor
[gcode_macro ENABLEFILAMENTSENSOR]
description: Activates filament sensor   
gcode:
    {% set SENSOR = params.SENSOR|default(printer["gcode_macro _m600cfg"].sensor_name) %} ; get sensor
    M{printer["gcode_macro _m600cfg"].output|int} Enabling filament sensor
    SET_FILAMENT_SENSOR SENSOR={SENSOR} ENABLE=1

# Disable filament sensor
[gcode_macro DISABLEFILAMENTSENSOR]
description: Deactivates filament sensor
gcode:
    {% set SENSOR = params.SENSOR|default(printer["gcode_macro _m600cfg"].sensor_name) %} ; get sensor
    M{printer["gcode_macro _m600cfg"].output|int} Disabling filament sensor
    SET_FILAMENT_SENSOR SENSOR={SENSOR} ENABLE=0

################################
########### OUTPUT #############
################################

# This feature is used for sending status messages to the console
[respond]

# This feature is used for sending status messages to the display
[display_status]

# This macro is used for silencing status messages
[gcode_macro M116]
description: Silent status feedback
gcode:

###############################
###                         ###
###  Sample Configurations  ###
###                         ###
###############################

###############################
### Filament Switch Sensor ####
### https://www.klipper3d.org/Config_Reference.html#filament_switch_sensor ###
###############################
#[filament_switch_sensor filament_sensor]
#switch_pin: ^PB6
#pause_on_runout: False #pause handled by macro
#runout_gcode:
#  FILAMENT_RUNOUT
#insert_gcode:
#  LOAD_FILAMENT

###############################
### Filament Motion Sensor ####
### https://www.klipper3d.org/Config_Reference.html#filament_motion_sensor ###
###############################
#[filament_motion_sensor smart_filament_sensor]
#switch_pin: ^PB6
#detection_length: 7.0
#extruder: extruder
#pause_on_runout: False #pause handled by macro
#runout_gcode:
#  FILAMENT_RUNOUT
#insert_gcode:
#  LOAD_FILAMENT


###############################
###                         ###
###      STATUS MACROS      ###
###                         ###
###############################
# STATUS_READY               - LED Ready/Idle State
# STATUS_BUSY                - LED Busy State
# STATUS_HEATING             - LED Extruder Heating State
# STATUS_M600                - LED Runout State
# STATUS_701                 - LED Filament Load State
# STATUS_702                 - LED Filament Unload State
# TELEGRAM_FILAMENT_RUNOUT   - Telegram Alert for runout
# CHANGE_TUNE                - Audio Alert tone
